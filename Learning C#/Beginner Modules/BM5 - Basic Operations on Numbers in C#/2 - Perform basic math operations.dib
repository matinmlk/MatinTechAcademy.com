#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

### Perform basic math operations

#!csharp

int sum = 7 + 5;
int difference = 7 - 5;
int product = 7 * 5;
int quotient = 7 / 5;

Console.WriteLine("Sum: " + sum);
Console.WriteLine("Difference: " + difference);
Console.WriteLine("Product: " + product);
Console.WriteLine("Quotient: " + quotient);

#!markdown

As you can see:

- `+` is the addition operator
- `-` is the subtraction operator
- `*` is the multiplication operator
- `/` is the division operator

However, the resulting quotient of the division example may not be what you expected. The values after the decimal are truncated from the quotient since it is defined as an `int`, and `int` cannot contain values after the decimal.

### Add code to perform division using literal decimal data

To see division working properly, you need to use a data type that supports fractional digits after the decimal point like decimal.

#!csharp

decimal decimalQuotient = 7.0m / 5;
Console.WriteLine($"Decimal quotient: {decimalQuotient}");

#!markdown

For this to work, the quotient (left of the assignment operator) must be of type decimal and at least one of numbers being divided must also be of type decimal (both numbers can also be a decimal type).

Here are two additional examples that work equally well:

```C#
decimal decimalQuotient = 7 / 5.0m;
decimal decimalQuotient = 7.0m / 5.0m;
```

However, the following lines of code won't work (or give inaccurate results):

```C#
int decimalQuotient = 7 / 5.0m;
int decimalQuotient = 7.0m / 5;
int decimalQuotient = 7.0m / 5.0m;
decimal decimalQuotient = 7 / 5;
```

#!markdown

### Write code to determine the remainder after integer division

The modulus operator % tells you the remainder of int division. What you really learn from this is whether one number is divisible by another. This can be useful during long processing operations when looping through hundreds or thousands of data records and you want to provide feedback to the end user after every 100 data records have been processed.

#!csharp

Console.WriteLine($"Modulus of 200 / 5 : {200 % 5}");
Console.WriteLine($"Modulus of 7 / 5 : {7 % 5}");

#!markdown

### Order of operations

As you learned in the previous exercise, you can use the `()` symbols as the order of operations operators. However, this isn't the only way the order of operations is determined.

In math, **PEMDAS** is an acronym that helps students remember the order of operations. The order is:

1. **Parentheses** (whatever is inside the parentheses is performed first)
2. **Exponents**
3. **Multiplication and Division** (from left to right)
4. **Addition and Subtraction** (from left to right)

C# follows the same order as **PEMDAS** except for exponents. While there's no exponent operator in C#, you can use the `System.Math.Pow` method. The module _"Call methods from the .NET Class Library using C#"_ will feature this method and others.

### Write code to exercise C#'s order of operations

Here you see the difference when performing the same operations in a different order.

#!csharp

int value1 = 3 + 4 * 5;
int value2 = (3 + 4) * 5;
Console.WriteLine(value1);
Console.WriteLine(value2);
